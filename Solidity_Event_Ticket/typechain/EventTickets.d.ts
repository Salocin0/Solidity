/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventTicketsInterface extends ethers.utils.Interface {
  functions: {
    "buyTickets(uint256)": FunctionFragment;
    "endSale()": FunctionFragment;
    "getBuyerTicketCount(address)": FunctionFragment;
    "getRefund(uint256)": FunctionFragment;
    "readEvent()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBuyerTicketCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "readEvent", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerTicketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readEvent", data: BytesLike): Result;

  events: {};
}

export class EventTickets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventTicketsInterface;

  functions: {
    buyTickets(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyerTicketCount(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRefund(
      toRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readEvent(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        description: string;
        website: string;
        totalTickets: BigNumber;
        sales: BigNumber;
        isOpen: boolean;
      }
    >;
  };

  buyTickets(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyerTicketCount(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRefund(
    toRefund: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readEvent(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean] & {
      description: string;
      website: string;
      totalTickets: BigNumber;
      sales: BigNumber;
      isOpen: boolean;
    }
  >;

  callStatic: {
    buyTickets(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endSale(overrides?: CallOverrides): Promise<void>;

    getBuyerTicketCount(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefund(toRefund: BigNumberish, overrides?: CallOverrides): Promise<void>;

    readEvent(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        description: string;
        website: string;
        totalTickets: BigNumber;
        sales: BigNumber;
        isOpen: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    buyTickets(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyerTicketCount(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefund(
      toRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readEvent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyerTicketCount(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefund(
      toRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readEvent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
